import streamlit as st
from app.analysis import aa_test_binary, aa_test_mean
from app.data_loader import load_data
import pandas as pd

def render_validation_screen():
    st.title("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫")
    st.markdown("""
    **–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏**
    - –ú–µ—Ç—Ä–∏–∫–∞ —Ä–∞—Å—á–∏—Ç–∞–Ω–∞ –ø–æ –∫–∞–∂–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏–ª–∏ –µ–¥–∏–Ω–∏—Ü–µ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏)
    - –û—Ç—Å—É—Ç—Å–≤–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è —Å –º–µ—Ç—Ä–∏–∫–æ–π - **metric** 
    - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è csv - ';'
    """)

    uploaded_file_validation = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª", type=["csv", "xlsx"])

    if uploaded_file_validation:
        try:
            df = load_data(uploaded_file_validation)

            st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
            st.dataframe(df.head(3))
            if df.isnull().sum().sum() > 0:
                st.info("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ª—É—á—à–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é, –∏—Å–∫–ª—é—á–∏–≤ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            
            n_sim = st.number_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º—É–ª—è—Ü–∏–π", value=10000, min_value=1000, max_value=100000)
            metric_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ç—Ä–∏–∫–∏", ["–ë–∏–Ω–∞—Ä–Ω–∞—è", "–ù–µ–±–∏–Ω–∞—Ä–Ω–∞—è"])

            if st.button("–ü—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É"):
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            
                with st.spinner('–ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...'):
                    # –ò–º–∏—Ç–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
                    if metric_type == "–ë–∏–Ω–∞—Ä–Ω–∞—è":
                        p_count, p_value, ci = aa_test_binary(df, n_sim) # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω
                    else:
                        p_count, p_value, ci = aa_test_mean(df, n_sim)

                # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if 0.05 >= round(ci[0], 2) and 0.05 <= round(ci[1], 2):
                    st.success('–ú–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é üëçüèº')
                else:
                    st.error('–ú–µ—Ç—Ä–∏–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é üò£')

                    st.markdown("""
                    <div style="background-color: #f0f8ff; padding: 1em; border-radius: 0.5em;">
                    <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:</b>
                    <ul>
                    <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏</li>
                    <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ—Ç –ª–∏ —Å–º–µ—â–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –¥–∞—Ç–µ, –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ —Ç.–ø.)</li>
                    <li>–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—ã–±—Ä–æ—Å—ã</li>
                    <li>–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–µ—Ç—Ä–∏–∫—É, –ª—É—á—à–µ –æ—Ç—Ä–∞–∂–∞—é—â—É—é –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
                    </ul>
                    </div>
                    """, unsafe_allow_html=True)


                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                results = {
                    "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": [
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤ –ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–∫—Ä–∞—Å–∞ —Ç–µ—Å—Ç–∞",
                        "–£—Ä–æ–≤–µ–Ω—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∫–∏",
                        "99%-–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —É—Ä–æ–≤–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏"
                    ],
                    "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                        p_count,
                        p_value,
                        ci
                    ]
                }

                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
                df_results = pd.DataFrame(results)

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
                st.dataframe(df_results)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

