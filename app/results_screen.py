import streamlit as st
import pandas as pd
from app.analysis import run_ab_test
from app.data_loader import load_data, save_experiment_info

def render_results_screen():
    st.title("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã A/B-—Ç–µ—Å—Ç–∞")
    st.markdown("""
    **–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞**
    - –ú–µ—Ç—Ä–∏–∫–∞ —Ä–∞—Å—á–∏—Ç–∞–Ω–∞ –ø–æ –∫–∞–∂–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏–ª–∏ –µ–¥–∏–Ω–∏—Ü–µ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏)
    - –û—Ç—Å—É—Ç—Å–≤–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è - **group (–∑–Ω–∞—á–µ–Ω–∏—è 0 –∏ 1)**, **metric**
    - –ï—Å–ª–∏ ratio –º–µ—Ç—Ä–∏–∫–∞, —Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –ø–æ–ª—è **num**, **denom**
    - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è csv - ';'
    """)

    uploaded_file_result = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Excel —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏", type=["csv", "xlsx"])

    if uploaded_file_result:
        try:
            df = load_data(uploaded_file_result)

            st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
            st.dataframe(df.head(3))

            test_type = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π", ["t-test", "z-test", "t-test —Å –ª–∏–Ω–µ–∞—Ä–∏–∑–∞—Ü–∏–µ–π (–¥–ª—è ratio)"])

            if 'group' in df.columns and 'metric' in df.columns:
                st.subheader("üìà –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏")
                if st.button('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'):
                    p_value = 0
                    stats, p_value, a, b = run_ab_test(df, test_type)
                    if p_value <= 0.05 and b - a > 0:
                        st.success(f'–†–∞–∑–ª–∏—á–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã')
                    elif p_value <= 0.05 and b - a < 0:
                        st.error(f'–†–∞–∑–ª–∏—á–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã')
                    else:
                        st.info(f'–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π –Ω–µ—Ç')
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    results = {
                        "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": [
                            "p-value",
                            "–ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                            "–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ",
                            "–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ",
                            "–ê–±—Å–æ–ª—é—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞",
                            "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞"
                        ],
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                            round(p_value, 2),
                            round(stats, 2),
                            a,
                            b,
                            b - a,
                            100.00 - (b * 100.00 / a)
                        ]
                    }

                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
                    df_results = pd.DataFrame(results)

                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
                    st.dataframe(df_results)

                if st.button('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'):
                    start_date = st.date_input('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞')
                    end_date = st.date_input('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞')
                    if st.button('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'):
                        save_experiment_info(start_date, end_date, df_results)
                        st.success('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
                    
            else:
                st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã 'group' –∏ 'metric'")

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
